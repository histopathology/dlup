from typing import Callable, overload

import numpy as np
from numpy.typing import NDArray

from dlup._types import GenericNumber
from dlup.geometry import Box as Box_
from dlup.geometry import Point as Point_
from dlup.geometry import Polygon as Polygon_

class Polygon:
    @property
    def fields(self) -> list[str]: ...
    def get_exterior(self) -> list[tuple[float, float]]: ...
    def get_interiors(self) -> list[list[tuple[float, float]]]: ...
    def contains(self, other: Polygon_) -> bool: ...
    def correct_orientation(self) -> None: ...
    @property
    def area(self) -> float: ...

def set_polygon_factory(factory: Callable[[Polygon_], Polygon_]) -> None: ...

class Point:
    @property
    def fields(self) -> list[str]: ...
    def scale(self, scaling: float) -> None: ...
    def get_coordinates(self) -> tuple[float, float]: ...
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...

def set_point_factory(factory: Callable[[Point_], Point_]) -> None: ...

class Box:
    @property
    def fields(self) -> list[str]: ...
    def as_polygon(self) -> Polygon_: ...
    @property
    def area(self) -> float: ...
    def scale(self, scaling: float) -> None: ...
    @property
    def coordinates(self) -> tuple[float, float]: ...
    @property
    def size(self) -> tuple[float, float]: ...

def set_box_factory(factory: Callable[[Box_], Box_]) -> None: ...

class LazyArray:
    def __array__(self) -> NDArray[np.int_]: ...
    def numpy(self) -> NDArray[np.int_]: ...

class PolygonCollection:
    def get_geometries(self) -> list[Polygon_]: ...
    def to_mask(self) -> LazyArray: ...

class AnnotationRegion:
    @property
    def polygons(self) -> PolygonCollection: ...
    @property
    def rois(self) -> PolygonCollection: ...
    @property
    def points(self) -> list[Point_]: ...
    @property
    def boxes(self) -> list[Box_]: ...

class GeometryCollection:
    def add_polygon(self, polygon: Polygon) -> None: ...
    def add_roi(self, roi: Polygon) -> None: ...
    def add_point(self, point: Point_) -> None: ...
    def add_box(self, box: Box_) -> None: ...
    @property
    def polygons(self) -> list[Polygon_]: ...
    @property
    def rois(self) -> list[Polygon_]: ...
    @property
    def points(self) -> list[Point_]: ...
    @property
    def boxes(self) -> list[Box_]: ...
    def set_offset(self, offset: tuple[float, float]) -> None: ...
    def rebuild_rtree(self) -> None: ...
    def reindex_polygons(self, index_map: dict[str, int]) -> None: ...
    @overload
    def remove_point(self, index: int) -> None: ...
    @overload
    def remove_point(self, point: Point_) -> None: ...
    @overload
    def remove_polygon(self, index: int) -> None: ...
    @overload
    def remove_polygon(self, polygon: Polygon_) -> None: ...
    @overload
    def remove_roi(self, index: int) -> None: ...
    @overload
    def remove_roi(self, roi: Polygon_) -> None: ...
    def sort_polygons(self, key: Callable[[Polygon_], int | float | str | None], reverse: bool) -> None: ...
    @property
    def bounding_box(self) -> tuple[tuple[float, float], tuple[float, float]]: ...
    def size(self) -> int: ...
    def simplify(self, tolerance: float) -> None: ...
    def scale(self, scaling: float) -> None: ...
    def read_region(
        self,
        coordinates: tuple[GenericNumber, GenericNumber],
        scaling: float,
        size: tuple[GenericNumber, GenericNumber],
    ) -> AnnotationRegion: ...
